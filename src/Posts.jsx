import React, { useState, useEffect } from 'react';
import { jsPDF } from 'jspdf';
import axios from 'axios';

const Posts = ({ posts, setPosts }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [sortOrder, setSortOrder] = useState('desc');
  const [newPost, setNewPost] = useState({ title: '', content: '', category_id: 1 });
  const [newComment, setNewComment] = useState({ postId: null, content: '' });
  const userId = window.sessionStorage.getItem('user_id');
  console.log(userId)
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleSortToggle = () => {
    setSortOrder((prevOrder) => (prevOrder === 'desc' ? 'asc' : 'desc'));
  };


  const handlePrint = (post) => {
    const doc = new jsPDF('p', 'pt', 'a4');
    doc.setFontSize(14);
  
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
  
    const headerHeight = 60;
    const footerHeight = 60;
    const contentHeight = pageHeight - headerHeight - footerHeight;
  
    doc.setFontSize(18);
    doc.text('Forum Post', 20, 40);
  
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text(`Title: ${post.title}`, 40, 100);
    doc.text(`Content:`, 40, 140);
    doc.setFont('times', 'italic');
    doc.setFontSize(12);
    doc.text(post.content, 40, 160, { maxWidth: pageWidth - 80 });
    doc.setFont('times', 'normal');
    doc.setFontSize(14);
    doc.text(`Author: ${post.user && post.user.name}`, 40, 240);
  
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 255);
    doc.text('Comments:', 40, 280);
    doc.setFontSize(12);
    let commentY = 320;
    post.comments.forEach((comment) => {
      doc.text(`- ${comment.content}`, 40, commentY, { maxWidth: pageWidth - 80 });
      commentY += 20;
    });
  
    doc.setFontSize(12);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by Forum App', 20, pageHeight - 30);
  
    doc.save(`${post.title}.pdf`);
  };
  
  const handleAddPost = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://127.0.0.1:8000/api/posts', {
        title: newPost.title,
        content: newPost.content,
        user_id: window.sessionStorage.getItem("user_id"),
      });

      setPosts([...posts, response.data]);

      setNewPost({ title: '', content: '', category_id: 1 });
    } catch (error) {
      console.error('Error adding post:', error);
    }
  };

  const handleAddComment = async (e, postId) => {
    e.preventDefault();
    try {
      const response = await axios.post(`http://127.0.0.1:8000/api/posts/${postId}/comments`, {
        content: newComment.content,
        user_id:  window.sessionStorage.getItem("user_id")
      });

      const updatedPosts = posts.map((post) => {
        if (post.id === postId) {
          return {
            ...post,
            comments: [...post.comments, response.data],
          };
        }
        return post;
      });

      setPosts(updatedPosts);
      setNewComment({ postId: null, content: '' });
    } catch (error) {
      console.error('Error adding comment:', error);
    }
  };

  const handleDeletePost = async (postId) => {
    try {
      await axios.delete(`http://127.0.0.1:8000/api/posts/${postId}`);
      const updatedPosts = posts.filter((post) => post.id !== postId);
      setPosts(updatedPosts);
    } catch (error) {
      console.error('Error deleting post:', error);
    }
  };

  const filteredPosts = posts?.filter((post) =>
    post.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const sortedPosts = filteredPosts?.sort((a, b) => {
    if (sortOrder === 'asc') {
      return a.likes.length - b.likes.length;
    } else {
      return b.likes.length - a.likes.length;
    }
  });

  return (
    <div className="posts">
      <div className="search-bar">
        <input
          type="text"
          value={searchTerm}
          onChange={handleSearchChange}
          placeholder="Search by title"
        />
      </div>
      <button className="sort-button" onClick={handleSortToggle}>
        Sort {sortOrder === 'asc' ? 'Asc' : 'Desc'}
      </button>
      <div className="add-post-form">
        <input
          type="text"
          placeholder="Title"
          value={newPost.title}
          onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}
        />
        <textarea
          placeholder="Content"
          value={newPost.content}
          onChange={(e) => setNewPost({ ...newPost, content: e.target.value })}
        ></textarea>
        <button onClick={handleAddPost}>Add Post</button>
      </div>
      {sortedPosts?.length > 0 ? (
        sortedPosts.map((post) => (
          <div key={post.id} className="post">
            <h2>{post.title}</h2>
            <p>{post.content}</p>
            <p className="author">Author: {post.user && post.user.name}</p>
            <div className="comments-section">
              <h3>Comments:</h3>
              {post.comments.length > 0 ? (
                <ul className="comments-list">
                  {post.comments.map((comment) => (
                    <li key={comment.id} className="comment">
                      {comment.content}
                    </li>
                  ))}
                </ul>
              ) : (
                <p>No comments yet.</p>
              )}
              <form onSubmit={(e) => handleAddComment(e, post.id)}>
                <input
                  type="text"
                  placeholder="Leave a comment"
                  value={newComment.content}
                  onChange={(e) =>
                    setNewComment({ postId: post.id, content: e.target.value })
                  }
                />
                <button type="submit">Submit</button>
              </form>
            </div>
           
            <p className="likes">Likes: {post.likes.length}</p>
            <button className="print-button" onClick={() => handlePrint(post)}>
              Print
            </button>
            {post.user.id == userId && (
                <button onClick={() => handleDeletePost(post.id)}>Delete</button>
              )}
          </div>
        ))
      ) : (
        <p>No posts found.</p>
      )}
    </div>
  );
};

export default Posts;



